Hallo Gaesadass 

 Berikut adalah perkembangan code dan struktur folder saat ini :  

[/home/enigmap/aptika/jdih_history/struktur_project.txt]:
""" Start isi code [struktur_project.txt] """

	.
	├── ./Makefile
	├── ./generate_project_structure.py
	├── ./jdih_history
	│   ├── ./jdih_history/__init__.py
	│   ├── ./jdih_history/asgi.py
	│   ├── ./jdih_history/settings.py
	│   ├── ./jdih_history/urls.py
	│   ├── ./jdih_history/utils
	│   │   └── ./jdih_history/utils/generate_secret_key.py
	│   └── ./jdih_history/wsgi.py
	├── ./manage.py
	├── ./output.txt
	├── ./peraturan
	│   ├── ./peraturan/__init__.py
	│   ├── ./peraturan/admin.py
	│   ├── ./peraturan/apps.py
	│   ├── ./peraturan/authentication.py
	│   ├── ./peraturan/migrations
	│   │   ├── ./peraturan/migrations/0001_initial.py
	│   │   ├── ./peraturan/migrations/0002_alter_peraturan_peraturan_terkait.py
	│   │   └── ./peraturan/migrations/__init__.py
	│   ├── ./peraturan/models.py
	│   ├── ./peraturan/serializers.py
	│   ├── ./peraturan/tests.py
	│   ├── ./peraturan/urls.py
	│   ├── ./peraturan/utils
	│   │   ├── ./peraturan/utils/__init__.py
	│   │   └── ./peraturan/utils/utils.py
	│   └── ./peraturan/views.py
	├── ./requirements.txt
	└── ./struktur_project.txt
	
	6 directories, 26 files

""" End code [struktur_project.txt] """

[/home/enigmap/aptika/jdih_history/jdih_history/settings.py]:
""" Start isi code [settings.py] """

	"""
	Django settings for jdih_history project.
	
	Generated by 'django-admin startproject' using Django 5.1.3.
	
	For more information on this file, see
	https://docs.djangoproject.com/en/5.1/topics/settings/
	
	For the full list of settings and their values, see
	https://docs.djangoproject.com/en/5.1/ref/settings/
	"""
	
	import os
	from pathlib import Path
	from decouple import config
	from datetime import timedelta
	
	# Build paths inside the project like this: BASE_DIR / 'subdir'.
	BASE_DIR = Path(__file__).resolve().parent.parent
	
	
	# Quick-start development settings - unsuitable for production
	# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
	
	# SECURITY WARNING: keep the secret key used in production secret!
	SECRET_KEY = config('SECRET_KEY')
	
	
	# SECURITY WARNING: don't run with debug turned on in production!
	DEBUG = True
	
	ALLOWED_HOSTS = []
	
	
	# Application definition
	
	INSTALLED_APPS = [
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'rest_framework',
	    'simple_history',
	    'django_extensions',
	
	    # Aplikasi lokal
	    'peraturan',
	
	]
	
	MIDDLEWARE = [
	    'django.middleware.security.SecurityMiddleware',
	    'django.contrib.sessions.middleware.SessionMiddleware',
	    'django.middleware.common.CommonMiddleware',
	    'django.middleware.csrf.CsrfViewMiddleware',
	    'django.contrib.auth.middleware.AuthenticationMiddleware',
	    'django.contrib.messages.middleware.MessageMiddleware',
	    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	]
	
	ROOT_URLCONF = 'jdih_history.urls'
	
	TEMPLATES = [
	    {
	        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	        'DIRS': [os.path.join(BASE_DIR, 'templates')],
	        'APP_DIRS': True,
	        'OPTIONS': {
	            'context_processors': [
	                'django.template.context_processors.debug',
	                'django.template.context_processors.request',
	                'django.contrib.auth.context_processors.auth',
	                'django.contrib.messages.context_processors.messages',
	            ],
	        },
	    },
	]
	
	WSGI_APPLICATION = 'jdih_history.wsgi.application'
	
	
	# Database
	# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
	
	# DATABASES = {
	#     'default': {
	#         'ENGINE': 'django.db.backends.sqlite3',
	#         'NAME': BASE_DIR / 'db.sqlite3',
	#     }
	# }
	
	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.postgresql',
	        'NAME': 'jdih_history_local',
	        'USER': 'kominfo_user',
	        'PASSWORD': 'kominfo_password',
	        'HOST': 'localhost',
	        'PORT': '5432',
	    }
	}
	
	
	# Password validation
	# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
	
	AUTH_PASSWORD_VALIDATORS = [
	    {
	        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	    },
	]
	
	REST_FRAMEWORK = {
	    'DEFAULT_AUTHENTICATION_CLASSES': (
	        'rest_framework_simplejwt.authentication.JWTAuthentication',
	    ),
	    'DEFAULT_PERMISSION_CLASSES': (
	        'rest_framework.permissions.IsAuthenticated',
	    ),
	}
	
	SIMPLE_JWT = {
	    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Token berlaku selama 60 menit
	    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # Refresh token berlaku selama 1 hari
	    'AUTH_HEADER_TYPES': ('Bearer',),
	}
	
	
	# Internationalization
	# https://docs.djangoproject.com/en/5.1/topics/i18n/
	
	LANGUAGE_CODE = 'en-us'
	
	TIME_ZONE = 'UTC'
	
	USE_I18N = True
	
	USE_TZ = True
	
	
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/5.1/howto/static-files/
	
	STATIC_URL = 'static/'
	
	# Default primary key field type
	# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
	
	DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

""" End code [settings.py] """

[/home/enigmap/aptika/jdih_history/jdih_history/urls.py]:
""" Start isi code [urls.py] """

	from django.contrib import admin
	from django.urls import path, include
	from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
	from django.contrib.auth import views as auth_views
	
	
	urlpatterns = [
	    path('admin/', admin.site.urls),
	    path('api/', include('peraturan.urls')), 
	    path('api/login/', TokenObtainPairView.as_view(), name='login'),
	]

""" End code [urls.py] """

[/home/enigmap/aptika/jdih_history/jdih_history/utils/generate_secret_key.py]:
""" Start isi code [generate_secret_key.py] """

	from django.core.management.utils import get_random_secret_key
	
	# Generate and print a new secret key
	print(get_random_secret_key())

""" End code [generate_secret_key.py] """

[/home/enigmap/aptika/jdih_history/peraturan/views.py]:
""" Start isi code [views.py] """

	from rest_framework import viewsets, status
	from rest_framework.response import Response
	
	from peraturan.authentication import SessionJWTAuthentication
	from peraturan.utils.utils import extract_pdf_content
	from .models import Peraturan, PeraturanVersion
	from .serializers import PeraturanSerializer, PeraturanVersionSerializer
	from rest_framework.decorators import action
	from rest_framework.permissions import IsAuthenticated
	from rest_framework.renderers import TemplateHTMLRenderer
	from django.shortcuts import redirect
	
	class PeraturanViewSet(viewsets.ModelViewSet):
	    queryset = Peraturan.objects.all()
	    serializer_class = PeraturanSerializer
	    permission_classes = [IsAuthenticated]
	    
	    @action(detail=True, methods=['post'])
	    def add_version(self, request, pk=None):
	        peraturan = self.get_object()
	        serializer = PeraturanVersionSerializer(data=request.data)
	        if serializer.is_valid():
	            # Set version number
	            last_version = peraturan.versions.last()
	            if last_version:
	                version_number = last_version.version_number + 1
	            else:
	                version_number = 1
	            serializer.save(peraturan=peraturan, version_number=version_number, updated_by=request.user)
	            
	
	            return Response(serializer.data, status=status.HTTP_201_CREATED)
	        else:
	            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
	
	class PeraturanVersionViewSet(viewsets.ReadOnlyModelViewSet):
	    queryset = PeraturanVersion.objects.all()
	    serializer_class = PeraturanVersionSerializer
	    permission_classes = [IsAuthenticated]
	
	    def save(self, *args, **kwargs):
	        # Pelacakan perubahan
	        previous_version = PeraturanVersion.objects.filter(
	            peraturan=self.peraturan,
	            version_number=self.version_number - 1
	        ).first()
	        if previous_version:
	            changed_fields = {}
	            # Bandingkan field Peraturan
	            peraturan_fields = [f.name for f in Peraturan._meta.fields if f.name not in ('id', 'created_at', 'updated_at')]
	            for field in peraturan_fields:
	                old_value = getattr(previous_version.peraturan, field)
	                new_value = getattr(self.peraturan, field)
	                if old_value != new_value:
	                    changed_fields[field] = {'old': old_value, 'new': new_value}
	
	            # Bandingkan isi PDF
	            if previous_version.extracted_content != self.extracted_content:
	                changed_fields['extracted_content'] = 'Content changed.'
	            self.changed_fields = changed_fields
	        self.save(update_fields=['changed_fields'])

""" End code [views.py] """

[/home/enigmap/aptika/jdih_history/peraturan/models.py]:
""" Start isi code [models.py] """

	from django.db import models
	from django.contrib.auth.models import User
	from django.utils import timezone
	from django.contrib.postgres.fields import ArrayField
	from django.db.models import JSONField
	
	from peraturan.utils.utils import extract_pdf_content
	
	class Peraturan(models.Model):
	    # Informasi Umum
	    jenis_peraturan = models.CharField(max_length=255)
	    judul_peraturan = models.TextField()
	    tahun_terbit = models.PositiveIntegerField()
	    nomor = models.CharField(max_length=50)
	    singkatan_jenis = models.CharField(max_length=50)
	    tanggal_penetapan = models.DateField()
	    tanggal_pengundangan = models.DateField()
	    teu_badan = models.CharField(max_length=255)
	    sumber = models.CharField(max_length=255)
	    tempat_terbit = models.CharField(max_length=255)
	    bidang_hukum = models.CharField(max_length=255)
	    subjek = models.CharField(max_length=255)
	    bahasa = models.CharField(max_length=50)
	    lokasi = models.CharField(max_length=255)
	    urusan_pemerintahan = models.CharField(max_length=255)
	    status_produk = models.CharField(max_length=50)
	    keterangan_status = models.TextField()
	    penandatangan = models.CharField(max_length=255)
	    pemrakarsa = models.CharField(max_length=255)
	    peraturan_terkait = ArrayField(
	        models.CharField(max_length=255),
	        blank=True,
	        null=True
	    )
	    dokumen_terkait = models.TextField(blank=True, null=True)
	    created_at = models.DateTimeField(default=timezone.now)
	    updated_at = models.DateTimeField(auto_now=True)
	
	    def __str__(self):
	        return f"{self.jenis_peraturan} {self.nomor} Tahun {self.tahun_terbit}"
	
	class PeraturanVersion(models.Model):
	    peraturan = models.ForeignKey(Peraturan, related_name='versions', on_delete=models.CASCADE)
	    version_number = models.PositiveIntegerField()
	    is_final = models.BooleanField(default=False)
	    pdf_file = models.FileField(upload_to='peraturan_pdfs/')
	    extracted_content = models.JSONField()
	    changed_fields = models.JSONField(blank=True, null=True)
	    created_at = models.DateTimeField(default=timezone.now)
	    updated_at = models.DateTimeField(auto_now=True)
	    updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
	
	    class Meta:
	        unique_together = ('peraturan', 'version_number')
	        ordering = ['version_number']
	
	    def __str__(self):
	        return f"{self.peraturan} - Versi {self.version_number}"
	
	    def save(self, *args, **kwargs):
	        # Ekstraksi PDF
	        if self.pdf_file:
	            self.pdf_file.seek(0)
	            extracted_text = extract_pdf_content(self.pdf_file)
	            self.extracted_content = {'text': extracted_text}
	        super().save(*args, **kwargs)
	
	
	

""" End code [models.py] """

[/home/enigmap/aptika/jdih_history/peraturan/serializers.py]:
""" Start isi code [serializers.py] """

	from rest_framework import serializers
	
	from peraturan.utils.utils import extract_pdf_content
	from .models import Peraturan, PeraturanVersion
	
	class PeraturanVersionSerializer(serializers.ModelSerializer):
	    class Meta:
	        model = PeraturanVersion
	        fields = ['version_number', 'is_final', 'pdf_file']
	    
	
	class PeraturanSerializer(serializers.ModelSerializer):
	    versions = PeraturanVersionSerializer(many=True, read_only=True)
	
	    class Meta:
	        model = Peraturan
	        fields = '__all__'
	        read_only_fields = ('created_at', 'updated_at')

""" End code [serializers.py] """

[/home/enigmap/aptika/jdih_history/peraturan/apps.py]:
""" Start isi code [apps.py] """

	from django.apps import AppConfig
	
	class PeraturanConfig(AppConfig):
	    default_auto_field = 'django.db.models.BigAutoField'
	    name = 'peraturan'

""" End code [apps.py] """

[/home/enigmap/aptika/jdih_history/peraturan/authentication.py]:
""" Start isi code [authentication.py] """

	# peraturan/authentication.py
	from rest_framework_simplejwt.authentication import JWTAuthentication
	
	class SessionJWTAuthentication(JWTAuthentication):
	    def authenticate(self, request):
	        token = request.session.get('jwt_token')
	        if token is None:
	            return None
	        validated_token = self.get_validated_token(token)
	        return self.get_user(validated_token), validated_token

""" End code [authentication.py] """

[/home/enigmap/aptika/jdih_history/peraturan/urls.py]:
""" Start isi code [urls.py] """

	# peraturan/urls.py
	
	from django.urls import path, include
	from rest_framework import routers
	from .views import PeraturanViewSet, PeraturanVersionViewSet
	
	router = routers.DefaultRouter()
	router.register(r'peraturan', PeraturanViewSet, basename='peraturan')
	router.register(r'versions', PeraturanVersionViewSet, basename='peraturanversion')
	
	
	urlpatterns = [
	    path('', include(router.urls)),
	]

""" End code [urls.py] """

[/home/enigmap/aptika/jdih_history/peraturan/utils/utils.py]:
""" Start isi code [utils.py] """

	import PyPDF2
	
	def extract_pdf_content(pdf_file):
	    reader = PyPDF2.PdfReader(pdf_file)
	    content = ""
	    for page in reader.pages:
	        content += page.extract_text()
	    return content
""" End code [utils.py] """

